<?php
/*
Plugin Name: VPM Slider
Plugin URI: http://www.vanpattenmedia.com/
Description: Allows the user to create, edit and remove ‘slides’ with text and images. MAKE ME BETTER.
Version: 1.0
Author: Peter Upfold
Author URI: http://vanpattenmedia.com/
License: GPL2
/* ----------------------------------------------*/

/*  Copyright (C) 2011-2012 Peter Upfold.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License, version 2, as 
    published by the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/


define('VPM_SLIDER_IN_FUNCTIONS', true);
define('VPM_SLIDER_REQUIRED_CAPABILITY', 'vpm_slider_manage_slides');
define('VPM_SLIDER_MAX_SLIDE_GROUPS', 24);
define('VPM_SLIDER_DEFAULT_CROP_WIDTH', 964);
define('VPM_SLIDER_DEFAULT_CROP_HEIGHT', 350);


require_once(dirname(__FILE__).'/slides_backend.php');

class VPMSlider { // not actually a widget -- really a plugin admin panel
							//  the widget class comes later



	/* data strucutre
	
		a serialized array stored as a wp_option
		
		
		vpm_slider_slides_[slug]
		
			[0]
				id				[string] (generated by str_replace('.', '_', uniqid('', true)); )
				title			[string]
				description		[string]
				background		[string]
				link			[string]
				title_pos_x		[int]
				title_pos_y		[int]
				
			[1]
				id				[string] (generated by str_replace('.', '_', uniqid('', true)); )
				title			[string]
				description		[string]
				background		[string]
				link			[string]
				title_pos_x		[int]
				title_pos_y		[int]	
				
			[2] ...			
	
	*/
	
	public function createSlidesOptionField() {
	/*
		Upon plugin activation, creates the vpm_slider_slide_groups option
		in wp_options, if it does not already exist.
	*/
	
		if (!get_option('vpm_slider_slide_groups')) {
		
			add_option('vpm_slider_slide_groups', array()); // create with a blank array
		
		}
		
		// set the capability for administrator so they can visit the options page
		$admin = get_role('administrator');
		$admin->add_cap(VPM_SLIDER_REQUIRED_CAPABILITY);
	
	}
	
	public function sanitizeSlideGroupSlug($slug)
	{
	/*
		Sanitize a slide group slug, for accessing the wp_option row with that slug name.		
	*/
		return substr(preg_replace('/[^a-zA-Z0-9]/', '', $slug), 0, 64);
	}
	
	private function getCurrentSlides($slug) {
	/*
		Returns an array of the current slides in the database, in their 
		current precedence order.
	*/
		return get_option('vpm_slider_slides_' . VPMSlider::sanitizeSlideGroupSlug($slug) );	
	}
	
	private function idFilter($idToFilter)
	{
	/*
		Filter a uniqid string for output to the admin interface HTML.
	*/
	
		return preg_replace('[^0-9a-zA-Z_]', '', $idToFilter);
	
	}
	
	public function uglyJSRedirect($location, $data = false)
	{
	/*
		Redirect, from within the admin panel for this plugin back to the plugin's main page.
	*/
	
		switch ($location) {
		
			case 'root':
				$url = 'admin.php?page=vpm-slider';
			break;
			
			case 'edit-slide-group':
				$url = 'admin.php?page=vpm-slider&group=';
				$url .= esc_attr(VPMSlider::sanitizeSlideGroupSlug($data));
			break;
			
			default:
				$url = 'admin.php?page=vpm-slider';
			break;
		
		}
	
		// erm, just a little bit of an ugly hack :(
		
		?><script type="text/javascript">window.location.replace('<?php echo $url; ?>');</script>
		<noscript><h1><a href="<?php echo esc_url($url); ?>">Please go here</a></h1></noscript><?php
		die();
	
	}
	
	public function passControlToAjaxHandler()
	{
	/*
		If the user is trying to perform an Ajax action, immediately pass
		control over to ajax_interface.php.
		
		This should hook admin_init() (therefore be as light as possible).
	*/
	
		if (array_key_exists('page', $_GET) && $_GET['page'] == 'vpm-slider' &&
			array_key_exists('vpm-slider-ajax', $_GET) && $_GET['vpm-slider-ajax'] == 'true'
		)
		{
			require_once(dirname(__FILE__).'/ajax_interface.php');
		}		
	
	}

	public function addAdminSubMenu() {
		/*
			Add the submenu to the admin sidebar for the configuration screen.
		*/	
		
		if (array_key_exists('page', $_GET) && $_GET['page'] == 'vpm-slider')
		{
		
			// get our JavaScript on	
			wp_enqueue_script('jquery');
			wp_enqueue_script('jquery-ui');
			
			wp_enqueue_script('media-upload');
			wp_enqueue_script('thickbox');
			wp_enqueue_style('thickbox');
			
			wp_enqueue_script('jquery-ui-draggable');	
			wp_enqueue_script('jquery-ui-droppable');	
			wp_enqueue_script('jquery-ui-sortable');		

			wp_register_script('vpm-slider-interface', plugin_dir_url( __FILE__ ).'js/interface.js');
			wp_enqueue_script('vpm-slider-interface');	
			
			// enqueue the frontend so that the interface will be ready
			VPMSlider::enqueueSliderFrontend('backend');
			
			wp_register_style('vpm-slider-interface-styles', plugin_dir_url( __FILE__ ).'css/interface.css');
			wp_enqueue_style('vpm-slider-interface-styles');
		}
	
		/* Top-level menu page */
		add_menu_page(
			
			'Slider',										/* title of options page */
			'Slider',										/* title of options menu item */
			VPM_SLIDER_REQUIRED_CAPABILITY,					/* permissions level */
			'vpm-slider',									/* menu slug */
			array('VPMSlider', 'printSlideGroupsPage'),		/* callback to print the page to output */
			plugin_dir_url( __FILE__ ).'img/vpm-slider-icon-16.png',/* icon file */
			null 											/* menu position number */
		);
		
		/* First child, 'Slide Groups' */
		$submenu = add_submenu_page(
		
			'vpm-slider',									/* parent slug */
			'Slide Groups',									/* title of page */
			'Slide Groups',									/* title to use in menu */
			VPM_SLIDER_REQUIRED_CAPABILITY,					/* permissions level */
			'vpm-slider',									/* menu slug */
			array('VPMSlider', 'printSlideGroupsPage')		/* callback to print the page to output */
		
		);
		
		/* 'Settings' */
		add_submenu_page(
		
			'vpm-slider',									/* parent slug */
			'Settings',										/* title of page */
			'Settings',										/* title to use in menu */
			VPM_SLIDER_REQUIRED_CAPABILITY,					/* permissions level */
			'vpm-slider-settings',							/* menu slug */
			array('VPMSlider', 'printSettingsPage')			/* callback to print the page to output */
		
		);		
		
		add_action( 'admin_head-'. $submenu, array('VPMSlider', 'addSlidesHelp') );
		
	
	}
	
	public function printSlideGroupsPage()
	{
	/*
		Print the page for adding, deleting Slide Groups and for pushing people over
		to the 'actual' slides editing interface for that Slide Group.
	*/
		
		// permissions check
		if (!current_user_can(VPM_SLIDER_REQUIRED_CAPABILITY))
		{
			?><h1>This page is not accessible to your user.</h1><?php
			return;
		}

		// if we are to remove a slide group, do that and redirect to home
		if (array_key_exists('action', $_GET) && $_GET['action'] == 'remove' && array_key_exists('group', $_GET))
		{
			if (wp_verify_nonce($_REQUEST['_wpnonce'], 'remove-slide-group'))
			{
				// remove the slide group
				$newGroup = new VPMSlideGroup($_GET['group']);
				$newGroup->delete();
				
				// remove the option
				delete_option('vpm_slider_slides_'. VPMSlider::sanitizeSlideGroupSlug($_GET['group']));
				
				// redirect back to the admin vpm slider root page
				VPMSlider::uglyJSRedirect('root');
				die();
					
			}
		}	
		
		// if the URL otherwise has 'group' in the GET parameters, it's time to pass control
		// to printSlidesPage() for editing purposes
		if (array_key_exists('group', $_GET))
		{
			VPMSlider::printSlidesPage();
			return;
		}
		
		// if we are to create a new slide group, do that and redirect to edit
		if (array_key_exists('action', $_GET) && $_GET['action'] == 'new_slide_group')
		{
			if (wp_verify_nonce($_REQUEST['_wpnonce'], 'new-slide-group'))
			{
			
				if (!empty($_POST['group-name']))
				{				
					// add the new slide group
					$newSlug = VPMSlider::sanitizeSlideGroupSlug(sanitize_title_with_dashes($_POST['group-name']));
					
					$newGroup = new VPMSlideGroup($newSlug, $_POST['group-name']);
					$newGroup->save();	
					
					// add the new slides option for this group
					add_option('vpm_slider_slides_'.$newSlug, array(), '', 'yes');
					
					// redirect to the new edit page for this slide group
					VPMSlider::uglyJSRedirect('edit-slide-group', $newSlug);
					die();
				}
			}
		}	
		
		?>
		<script type="text/javascript">
		//<![CDATA[
		jQuery(document).ready(function() {
			jQuery('#new-slide-group-button').click(function(e) {
				e.preventDefault();
				jQuery('#new-slide-group').show('slow');
			});
			jQuery('#new-slide-group-cancel').click(function(e) {
				e.preventDefault();
				jQuery('#new-slide-group').hide('slow');
			});
		});
		//]]>
		</script>
		<div class="wrap">
		
		<div id="icon-vpm-slides" class="icon32"><br /></div><h2>Slide Groups <a href="#" id="new-slide-group-button" class="add-new-h2">Add New</a></h2>
		
		<noscript>
		<h3>Sorry, this interface requires JavaScript to function.</h3>
		<p>You will need to enable JavaScript for this page before many of the controls below will work.</p>
		</noscript>

		<div id="new-slide-group">
			<form name="new-slide-group-form" id="new-slide-group-form" method="post" action="admin.php?page=vpm-slider&action=new_slide_group">
				<h3 id="new-slide-group-header">Add a Slide Group</h3>
				<?php wp_nonce_field('new-slide-group');?>
				<table class="form-table" style="max-width:690px">
				
					<tr class="form-field form-required">
						<th scope="row"><label for="group-name">Group Name</label></th>
						<td><input name="group-name" type="text" id="group-name" value="" /></td>
					</tr>
				</table>
				<p class="submit"><input type="submit" class="button-primary" value="Add Slide Group "  />
				<input type="button" id="new-slide-group-cancel" class="button-secondary" value="Cancel" /></p></form>
			</form>
		</div>


		<?php require_once( dirname( __FILE__ ) . '/slide_groups_table.php');
		$table = new SlideGroupsTable();		
		$table->prepare_items();		
		$table->display();
		
				
		if ($table->getTotalItems() < 1)
		{
			?><div class="slidesort-add-hint">Click &lsquo;Add New&rsquo; to create a new group of slides.</div><?php
		}
		?>
		
		<?php VPMSlider::printPluginFooter(); ?>
		
		</div><!--wrap-->
		<?php
	}
	
	public function printSlidesPage() {
	/*
		Print the actual slides page for adding, editing and removing the slides.
	*/
		// permissions check
		if (!current_user_can(VPM_SLIDER_REQUIRED_CAPABILITY))
		{
			?><h1>This page is not accessible to your user.</h1><?php
			return;
		}

		$theSlug = VPMSlider::sanitizeSlideGroupSlug($_GET['group']);
		if (empty($theSlug))
		{
			echo '<div class="wrap"><h1>No Slide Group selected.</h1></div>';
			return;
		}
		
		// get the name data for this slide group based on its slug
		$slideGroup = new VPMSlideGroup($_GET['group']);
		if (!$slideGroup->load())
		{
			echo '<div class="wrap"><h1>Could not load the selected Slide Group. Does it exist?</h1></div>';
			return;
		}
		
		?>

		<script type="text/javascript">
		//<![CDATA[
		var VPM_WP_ROOT = '<?php echo admin_url(); ?>';var VPM_HPS_PLUGIN_URL = '<?php echo admin_url();?>admin.php?page=vpm-slider&vpm-slider-ajax=true&';var VPM_HPS_GROUP = '<?php echo esc_attr($theSlug);?>';
		//]]>
		</script>
		
		<div class="wrap">
		
		<div id="icon-vpm-slides" class="icon32"><br /></div><h2>&lsquo;<?php echo esc_html($slideGroup->name);?>&rsquo; Slides <a href="#" id="new-slide-button" class="add-new-h2">Add New</a></h2>
		
		<noscript>
		<h3>Sorry, this interface requires JavaScript to function.</h3>
		<p>You will need to enable JavaScript for this page before any of the controls below will work.</p>
		</noscript>
		
		<form name="vpm-the-slides">
				
		<!--sortable slides-->
		<ul id="slidesort">
		<?php
		
		$currentSlides = VPMSlider::getCurrentSlides($theSlug);
		
		if (is_array($currentSlides) && count($currentSlides) > 0)
		{
		
			foreach($currentSlides as $slide) {
			
				$myId = VPMSlider::idFilter($slide['id']);
				
				?>
				
				<li id="slidesort_<?php echo $myId;?>">
								
					<span id="slidesort_<?php echo $myId;?>_text"><?php echo stripslashes(esc_html($slide['title']));?></span>
					
					<span id="slidesort_<?php echo $myId;?>_delete" class="slide-delete">
						[<a id="slidesort_<?php echo $myId;?>_delete_button" class="slide-delete-button" href="#">delete</a>]
					</span>
				
				</li>
				
				<?php
			
			}
		
		}
		
		?>
	
		<div class="slidesort-add-hint"<?php if (is_array($currentSlides) && count($currentSlides) > 0) echo ' style="display:none"'; ?>>Click &lsquo;Add New&rsquo; to create a slide.</div>
		</ul>
		
		<div id="message-area" class="updated settings-error below-h2"></div>
		
		<div id="loading-area"><img src="<?php echo plugin_dir_url( __FILE__ ).'img/loadingAnimation.gif';?>" /></div>
		
		<hr class="edit-area-top-hr" />
		
		<div id="edit-area">
		
			<ul id="vpm-slider">
			
				<li id="preview-area">
				
					<div id="slide-preview" class="desc">
						<h2 id="slide-preview-title">Slide preview</h2>
						<div class="png_fix">
							<p id="slide-preview-description">Class Aptent Taciti Sociosqu Ad Litora Torquent Per Conubia Nostra, Per Inceptos.</p>
						</div>
					</div>
				
				</li>
			
			</ul>
		
			<div id="edit-controls">
				<form id="edit-form">
					<table class="form-table edit-controls-form-table">
						<tbody>
							<tr class="form-field">
								<th scope="row">
									<label for="edit-slide-title">Title</label>
								</th>
								<td>
									<input type="text" name="slide-title" id="edit-slide-title" value="" maxlength="64" class="edit-controls-inputs" />
								</td>
							</tr>
							<tr class="form-field">
								<th scope="row">
									<label for="edit-slide-description">Description</label>
								</th>
								<td>
									<input type="text" name="slide-description" id="edit-slide-description" value="" maxlength="255" class="edit-controls-inputs" style="min-width:200px" />
								</td>
							</tr>
							
							<tr class="form-field">
								<th scope="row">
									<label for="edit-slide-image-upload">Background</label>
								</th>
								<td>
									<span id="edit-slide-image-url"></span> <input id="edit-slide-image" type="hidden" name="slide-image" />
									<input id="edit-slide-image-upload" type="button" class="button" value="Upload or choose image" />
								</td>
							</tr>
							
							<tr class="form-field">
								<th scope="row">
									<label for="edit-slide-link">Slide Link</label>
								</th>
								<td>
									<input type="text" name="slide-link" id="edit-slide-link" value="" maxlength="255" class="edit-controls-inputs" />
								</td>
							</tr>
							
							<tr class="form-field edit-controls-save-input">
								<th scope="row">
									
								</th>
								<td>
									<input type="button" id="edit-controls-save" class="button-primary" value="Save" />
									<input type="button" id="edit-controls-cancel" class="button-secondary" value="Cancel" />
								</td>
							</tr>
							
						</tbody>					
					</table>
				</form>
			
			</div>
		
		</div>
		
		<div style="clear:both;"></div>
		
		
		<!--<br/>
		<input type="button" value="Serialise slide order" id="serialise-me-test" /><br />
		<input type="button" value="Show X/Y offset values" id="show-xy-test" /><br />-->
		
		
		</form>
		
		
		
		<p class="vpm-slider-help-point"><a href="#">How do I get these to show up on my site?</a></p>
		
		<?php VPMSlider::printPluginFooter(); ?>
		
		</div><?php
	
	}
	
	public function setCapabilityForRoles($rolesToSet)
	{
	/*
		Set the VPM_SLIDER_REQUIRED_CAPABILITY capability against this role, so this WordPress
		user role is able to manage the slides.
		
		Will clear out the capability from all roles, then add it to both administrator and the
		specified roles. (Administrator always has access).
	*/
		global $wp_roles;
		
		if (!current_user_can('manage_options'))
		{
			return false;
		}
	
		$allRoles = get_editable_roles();
		$validRoles = array_keys($allRoles);
		
		if (!is_array($allRoles) || count($allRoles) < 1)
		{
			return false;
		}
		
		// clear the capability from all roles first
		foreach ($allRoles as $rName => $r)
		{
			$wp_roles->remove_cap($rName, VPM_SLIDER_REQUIRED_CAPABILITY);
		}
		
		// add the capability to 'administrator', which can always manage slides
		$wp_roles->add_cap('administrator', VPM_SLIDER_REQUIRED_CAPABILITY);
		
		// add the capability to the specified $roleToSet
		if (is_array($rolesToSet) && count($rolesToSet) > 0)
		{
			foreach($rolesToSet as $theRole)
			{
				if (in_array($theRole, $validRoles))
				{
					$wp_roles->add_cap($theRole, VPM_SLIDER_REQUIRED_CAPABILITY);
				}
			}
		}
		
		return true;
	
	}
	
	public function printSettingsPage()
	{
	/*
		Print the settings page to output, and also handle any of the Settings forms if they
		have come back to us.
	*/
	
		if (!current_user_can(VPM_SLIDER_REQUIRED_CAPABILITY))
		{
			echo '<h1>You do not have permission to manage slider settings.</h1>';
			die();
		}
	
		$success = null;
		$message = '';
	
		if (strtolower($_SERVER['REQUEST_METHOD']) == 'post' && array_key_exists('vpm-slider-settings-submitted', $_POST))
		{
			// handle the submitted form
			
			if (current_user_can('manage_options'))
			{
			
				$rolesToAdd = array();
			
				// find any checked roles to add our capability to
				foreach($_POST as $pk => $po)
				{
					if (preg_match('/^required_capability_/', $pk))
					{
						$roleNameChopped = substr($pk, strlen('required_capability_'));
						
						// do not allow administrator to be modified
						if ($roleNameChopped != 'administrator' && $po == '1')
						{
							$rolesToAdd[] = $roleNameChopped;		
						}								
					}
				}
				
				VPMSlider::setCapabilityForRoles($rolesToAdd);
				$success = true;
				$message .= 'Required role level saved.';
			
			}
			
		
		}
	
		?><div class="wrap">
		<div id="icon-vpm-slides" class="icon32" style="background:transparent url(<?php echo plugin_dir_url( __FILE__ );?>img/vpm-slider-icon-32.png?ver=20120229) no-repeat;"><br /></div><h2>Settings</h2>
		
		
		<?php if ($success): ?>
			<div class="updated settings-error">
				<p><strong><?php echo esc_html($message); ?></strong></p>
			</div>
		<?php endif; ?>
		
		
		<form method="post" action="admin.php?page=vpm-slider-settings">
			<input type="hidden" name="vpm-slider-settings-submitted" value="true" />
		
			<!-- Only display 'Required Role Level' to manage_options capable users -->
			<?php if (current_user_can('manage_options')):?>
		
			<h3>Required Role Level</h3>
			<p>Any user with a checked role will be allowed to create, edit and delete slides. Only users that can manage
			widgets are able to activate, deactivate or move the VPM Slider widget, which makes the slides show up on your site.</p>
			
			<table class="form-table">
			<tbody>
				<tr class="form-field">
					<td>
					<?php
					$allRoles = get_editable_roles();
					?>
					
					<?php
							if (is_array($allRoles) && count($allRoles) > 0):
								foreach($allRoles as $rName => $r): ?>
					<tr>
						<td>
							<label for="required_capability_<?php echo esc_attr($rName);?>">
								<input type="checkbox" name="required_capability_<?php echo esc_attr($rName);?>"
								id="required_capability_<?php echo esc_attr($rName);?>" value="1" style="width:20px;"
									<?php 
									/* if this role has the vpm_slider_manage_slides capability, mark it as selected */
									
									if (array_key_exists(VPM_SLIDER_REQUIRED_CAPABILITY, $r['capabilities'])): ?>
									checked="checked"
									<?php endif;?>
									
									<?php // lock administrator checkbox on
									if ($rName == 'administrator'):
									 ?>
									disabled="disabled"
									 <?php endif; ?>

								 /><?php echo esc_html($r['name']);?><br/>
							</label>
						</td>
					</tr>
					
					<?php endforeach; endif; ?>
				
			</table>
			
			<?php endif; ?>		
			
		<p class="submit">
			<input class="button-primary" type="submit" value="Save Changes" id="submitbutton" />		
		</p>
		
		</form>
		<?php VPMSlider::printPluginFooter(); ?>
		</div><?php
	
	}
	
	public function printPluginFooter()
	{
	/*
		Print out the plugin footer, including the link to the donate page.
	*/	
	
		
	
		?>
		<p style="color:#777;font-size:12px;border-top:#e7e7e7 dotted 1px; margin-top:30px; padding-top:9px">
		<strong><a href="">VPM Slider</a> by <a href="http://www.vanpattenmedia.com/">Van Patten Media</a>.</strong> If you find this plugin useful, or are using it commercially, please consider
		<a href="">making a financial contribution</a>. Thank you.</p><?php
	
	}
	
	public function addSlidesHelp()
	{
	/*
		Add our help tab to the Slides page.
	*/
	
		$screen = get_current_screen();
		
		$screen->add_help_tab( array (
			'id'			=>			'vpm-slider-groups',
			'title'			=>			'Slide Groups',
			'content'		=>			'<p>Each Slide Group contains a number of Slides that will appear, one after another, when you publish your Slides on your site.</p><p>You can make up to '.intval(VPM_SLIDER_MAX_SLIDE_GROUPS).' Slide Groups, which you can use to have different slideshows on different parts of your site.</p>'
		
		) );
		
		$screen->add_help_tab( array (
			'id'			=>			'vpm-slider-editing',
			'title'			=>			'Editing',
			'content'		=>			'<p>Once you have clicked &lsquo;Edit&rsquo; on the desired Slide Group, you&rsquo;ll see all of its Slides.</p><p>Click on any Slide to make changes. As well as changing the Slide text, link and image, you can drag and drop the title and description to place them anywhere over the background image.</p><p>Simply drag and drop to re-order the Slides in the Slide Group. The new order is saved immediately.</p>'
		
		) );		
		
		$screen->add_help_tab( array(
		
			'id'			=>			'vpm-slider-publishing',
			'title'			=>			'Publishing',
			'content'		=>			'<p>Once you are happy with your new Slide Group, you need to publish it for it to show up on your site.</p><p>To do this, your theme needs to support Widgets, and have a &lsquo;sidebar&rsquo; in the theme where you&rsquo;d like the Slides to show up.</p><p>Go across to <a href="widgets.php">Appearance &raquo; Widgets</a> and drag a <strong>VPM Slider</strong> Widget to the desired sidebar. In the Widget&rsquo;s settings, choose the Slide Group to show and click <em>Save</em>.</p>'
		
		) );
		
		$crop = VPMSlider::determineCropWidthAndHeight();

		$screen->add_help_tab( array(
		
			'id'			=>			'vpm-slider-hints',
			'title'			=>			'Hints &amp; Tips',
			'content'		=>			'<ul><li>For the best visual results, crop your background images to the size used by your Slider template &mdash; '.$crop['width'].'&times;'.$crop['height'].'.</li><li>Experiment with dragging and dropping the title and description over different parts of the background to achieve a different visual effect.</li><li>Keep your site fresh &mdash; create multiple Slide Groups ahead of time, then simply edit the <strong>VPM Slider</strong> Widget to switch over to display another Slide Group every now and then.</li><li>Completely customise the look of your Slides &mdash; create a <em>vpm-slider-templates</em> subfolder in your theme. You can use our <em>templates</em> folder in the plugin as a starting point.</ul>'
		
		) );	
	
	
	}
	
	public function enqueueSliderFrontend($context = 'frontend')
	{
	/*
		When WordPress is enqueueing the styles, inject our slider CSS and JavaScript in.
		Use the default template if not available in the active theme, or use the active theme's
		VPM Slider templates if they do indeed exist.
		
		If $context is 'backend', we will load the CSS only and not the JS.
		
	*/
	
		// look for a template file for vpm-slider in the current active theme
		$themePath = get_stylesheet_directory();
		
		if (
			@file_exists($themePath . '/vpm-slider-templates' ) 
			&& @is_dir($themePath . '/vpm-slider-templates' )
			&& @file_exists($themePath . '/vpm-slider-templates/vpm-slider-template.css')
		)
		{
		
			// determine theme URL
			$themeURL = get_stylesheet_directory_uri(); // get 'stylesheet' not 'template' will support child themes
			
			// enqueue the user's custom CSS template
			wp_register_style(
				'vpm-slider-frontend',																		/* handle */
				$themeURL . '/vpm-slider-templates/vpm-slider-template.css',								/* src */
				array(),																					/* deps */
				date("Ymd", @filemtime($themePath . '/vpm-slider-templates/vpm-slider-template.css') ) , 	/* ver */
				'all'																						/* media */
			);
			
			wp_enqueue_style('vpm-slider-frontend');
			
			if ($context != 'backend')
			{
				// is there a custom JS to use?
				if ( @file_exists($themePath . '/vpm-slider-templates/vpm-slider-template.js') )
				{
					
					// enqueue the user's custom JS template
					wp_register_script(
						'vpm-slider-frontend',																		/* handle */
						$themeURL . '/vpm-slider-templates/vpm-slider-template.js',									/* src */
						array(),																					/* deps */
						date("Ymd", @filemtime($themePath . '/vpm-slider-templates/vpm-slider-template.js') ) , 	/* ver */
						'all'																						/* media */
					);
					
					wp_enqueue_script('vpm-slider-frontend');		
					
				}
				else {
					// use the default JS				
					wp_register_script(
						'vpm-slider-jquery-cycle-lite',															/* handle */
						plugin_dir_url( __FILE__ ) . 'js/jquery.cycle.lite.js',									/* src */
						array('jquery'),																		/* deps */
						date("Ymd", @filemtime(plugin_dir_path( __FILE__ ) .
														 '/js/jquery.cycle.lite.js')) , 						/* ver */
						'all'
					);
					
					wp_enqueue_script('vpm-slider-jquery-cycle-lite');
					
					// and the frontend
					wp_register_script(
						'vpm-slider-frontend',																/* handle */
						plugin_dir_url( __FILE__ ) . 'templates/vpm-slider-template.js',					/* src */
						array('jquery', 'vpm-slider-jquery-cycle-lite'),									/* deps */
						date("Ymd", @filemtime(plugin_dir_path( __FILE__ ) .
														 '/templates/vpm-slider-template.js')) , 			/* ver */
						'all'
					);		
				}
			}
		
		}
		else {
			
			// enqueue our defaults
			wp_register_style(
				'vpm-slider-frontend',																		/* handle */
				plugin_dir_url( __FILE__ ) . 'templates/vpm-slider-template.css',							/* src */
				array(),																					/* deps */
				date("Ymd", @filemtime(plugin_dir_path( __FILE__ ) .
													 '/templates/vpm-slider-template.css')) , 				/* ver */
				'all'																						/* media */
			);
			
			wp_enqueue_style('vpm-slider-frontend');
			
			if ($context != 'backend')
			{
				// also bring in the jquery cycle lite
				
				wp_register_script(
					'vpm-slider-jquery-cycle-lite',															/* handle */
					plugin_dir_url( __FILE__ ) . 'js/jquery.cycle.lite.js',									/* src */
					array('jquery'),																		/* deps */
					date("Ymd", @filemtime(plugin_dir_path( __FILE__ ) .
													 '/js/jquery.cycle.lite.js')) , 						/* ver */
					'all'
				);
				
				wp_enqueue_script('vpm-slider-jquery-cycle-lite');
				
				// and the frontend
				wp_register_script(
					'vpm-slider-frontend',																/* handle */
					plugin_dir_url( __FILE__ ) . 'templates/vpm-slider-template.js',					/* src */
					array('jquery', 'vpm-slider-jquery-cycle-lite'),									/* deps */
					date("Ymd", @filemtime(plugin_dir_path( __FILE__ ) .
													 '/templates/vpm-slider-template.js')) , 			/* ver */
					'all'
				);		
				
				wp_enqueue_script('vpm-slider-frontend');		
							
			}	
		}
	
	}
	
	public function determineCropWidthAndHeight()
	{
	/*
		Using the active Slider template, determine the desired crop height
		and crop width for the background image.
		
		Requires that custom theme CSS wrap the width and height in question in
		//	/*crop-to-width*/
		//  /*end crop-to-width*/
		//	/*crop-to-height*/
		//	/*end crop-to-height*/
		/*
		
	*/
		$themePath = get_stylesheet_directory();
		
		if (@file_exists($themePath . '/vpm-slider-templates/vpm-slider-template.css'))
		{
			$css = @file_get_contents($themePath . '/vpm-slider-templates/vpm-slider-template.css');
		}
		else {
			$css = @file_get_contents(dirname(__FILE__) . '/templates/vpm-slider-template.css');
		}
			
		if ($css !== false)
		{
			$matches = array();
			preg_match('|/\*crop\-to\-width\*/(.*)/\*end crop\-to\-width\*/|', $css, $matches);
			
			if (count($matches) > 0)
			{
				$cropWidth = (int) preg_replace('/[^0-9]$/', '', $matches[1]);
			}
			else {
				$cropWidth = VPM_SLIDER_DEFAULT_CROP_WIDTH;
			}
			
			$matches = array();
			
			preg_match('|/\*crop\-to\-height\*/(.*)/\*end crop\-to\-height\*/|', $css, $matches);										
			
			if (count($matches) > 0)
			{
				$cropHeight = (int) preg_replace('/[^0-9]$/', '', $matches[1]);
			}
			else {
				$cropHeight = VPM_SLIDER_DEFAULT_CROP_HEIGHT;
			}	
		}
		else {
			$cropWidth = VPM_SLIDER_DEFAULT_CROP_WIDTH;
			$cropHeight = VPM_SLIDER_DEFAULT_CROP_HEIGHT;
		}
		
		return array('width' => $cropWidth, 'height' => $cropHeight);
	
	}
	
	public function registerAsWidget() {
	/*
		Register the output to the theme as a widget	
	*/
	
		register_widget('VPMSliderWidget');

	}
	
	public function printUploaderJavaScript()
	{
	/*
		Print the JavaScript to inject into the Media Uploader
	*/
	
		if (array_key_exists('vpm-slider-uploader', $_GET) && $_GET['vpm-slider-uploader'] == 'bgimage')
		{
		
			$crop = VPMSlider::determineCropWidthAndHeight();
	
		?>
		<script type="text/javascript">
		//<![CDATA[
		// VPM Slider shimming button names and modifying uploader for our purposes
		jQuery(document).ready(function() {
		
			jQuery('#media-items .post_title,#media-items .image_alt,#media-items .post_excerpt,#media-items .post_content, #media-items .url, #media-items .align').hide(); // hide unnecessary items//#media-items .image-size
		
			jQuery('.imgedit-response').append('<p style="text-align:center;font-size:12px;color:#909090;">Choose &lsquo;Edit Image&rsquo; and crop to <?php echo $crop['width'];?>&times;<?php echo $crop['height'];?> for best results.</p>');
		
			jQuery('.savesend .button').each(function() {
				jQuery(this).attr('value', 'Use as background image');
			});
			
			uploader.bind('FileUploaded', function() {
				window.setTimeout(function() {
				
					jQuery('#media-items .post_title,#media-items .image_alt,#media-items .post_excerpt,#media-items .post_content, #media-items .url, #media-items .align').hide(); // hide unnecessary items//#media-items .image-size
					
					jQuery('.imgedit-response').append('<p style="text-align:center;font-size:12px;color:#909090;">Choose &lsquo;Edit Image&rsquo; and crop to <?php echo $crop['width'];?>&times;<?php echo $crop['height'];?> for best results.</p>');
				
					// rename the main action button
					jQuery('.savesend .button').each(function() {
						jQuery(this).attr('value', 'Use as background image');
					});
				}, 500); 
			});
			
		});
		
		//]]>
		</script>
		<?php
		
		}
	
	}


};


class VPMSliderWidget extends WP_Widget {	
/*
	The VPM Slider Widget is responsible for allowing the user to place the slider in any
	‘sidebar’ defined in their theme and for invoking the Slider template file for displaying
	the slides.
	
	This widget class also defines a minimalist API for the Slider template files to use to display
	the slides.
*/

	/*
		These hold the data for the current slide we are working with.
		
		The template file accesses these indirectly, through the the_… and get_the_… functions.
	*/
	private $slides; // stores all of the slides in this group
	private $instance; // has_slides needs access to the instance data
	protected $slide_title;
	protected $slide_description;
	protected $slide_background_url;
	protected $slide_link;
	protected $slide_x;
	protected $slide_y;
	protected $slide_identifier;
	protected $slider_iteration = 0;
	
	
	public function __construct(){
	/*
		Constructor, merely calls the WP_Widget constructor.
	*/
		parent::__construct(false, 'VPM Slider');
	}
	
	public function widget($args, $instance) {
	/*
		The widget function is responsible for rendering the widget's output. In the case
		of VPM Slider Widget, this will invoke the Slider template file to output the slides
		to the desired widget area.
	*/
		
		if (!$this->instance)
		{
			// prepare instance data for has_slides()
			$this->instance = $instance;
		}
		
		$s = &$this; // $s is used by the theme to call our functions to actually display the data
		
		// look for a template file for vpm-slider in the current active theme
		$themePath = get_stylesheet_directory();
		
		if (
			@file_exists($themePath . '/vpm-slider-templates' ) 
			&& @is_dir($themePath . '/vpm-slider-templates' )
			&& @file_exists($themePath . '/vpm-slider-templates/vpm-slider-template.php')
		)
		{
			require_once($themePath . '/vpm-slider-templates/vpm-slider-template.php' );
		}
		else
		{ // if not, use our default
			require_once( dirname(__FILE__) . '/templates/vpm-slider-template.php' );
		}	
		
		
	?>


</ul>	
	<?php

	}
	
	public function form($instance)
	{
	/*
		The form function defines the settings form for the widget.
		
		In our case, we will allow the user to pick which Slide Group this widget is responsible
		for displaying.
	*/
	
	?><p>Choose a slide group for this widget to show:</p>
	
	<select id="<?php echo $this->get_field_id('groupSlug');?>" name="<?php echo $this->get_field_name('groupSlug');?>">
		<option value="**INVALID**">--------------------</option>
		<?php
		
			// find all the slide groups and offer them for the widget
			
			$slideGroups = get_option('vpm_slider_slide_groups');
			
			if (is_array($slideGroups) && count($slideGroups) > 0)
			{
				foreach($slideGroups as $group)
				{
					?><option value="<?php echo esc_attr($group->slug);?>"
						<?php if (array_key_exists('groupSlug', $instance)):
							echo ($group->slug == $instance['groupSlug']) ? ' selected="selected"' : '';
						endif; ?>
					><?php echo esc_html($group->name);?></option><?php
				}
			
			}				
		
		?>		
	</select>
	<?php
	
	}
	
	public function update($newInstance, $oldInstance)
	{
	/*
		Update the widget's settings with the new selected slide group from the form()
	*/
	
		if ($newInstance['groupSlug'] != '**INVALID**')
		{
			
			return array('groupSlug' => VPMSlider::sanitizeSlideGroupSlug($newInstance['groupSlug']));
		}
		else {
			return false;
		}
	
	}
	
	
	public function has_slides()
	{
	/*
		Behaves as an iterator for the purposes of slider template files. It loads
		in the next slide, readying the other functions below for returning
		the data from this particular slide to the theme.
		
		
	*/
	
		if (!$this->instance)
		{
			throw new Exception("The widget's instance data, containing information about which slide group to show, could not be loaded.");
			return false;
		}
	
		if (!is_array($this->slides) || count($this->slides) < 1)
		{
			$this->slides = get_option('vpm_slider_slides_' . VPMSlider::sanitizeSlideGroupSlug($this->instance['groupSlug']));		
		}
		
		// on which slide should we work? does it exist?
		if (count($this->slides) < $this->slider_iteration + 1) //TODO I am not working right
		{
			return false; // we are at the end of the slides
		}
		
		// otherwise, load in the data
		if (!empty ($this->slides[$this->slider_iteration]['title']) )
		{
			$this->slide_title = $this->slides[$this->slider_iteration]['title'];
		}
		if (!empty ($this->slides[$this->slider_iteration]['description']) )
		{
			$this->slide_description = $this->slides[$this->slider_iteration]['description'];
		}
		
		if (!empty ($this->slides[$this->slider_iteration]['id']) )
		{
			$this->slide_identifier = $this->slides[$this->slider_iteration]['id'];
		}
		
		// the background may be blank!
		if (!empty ($this->slides[$this->slider_iteration]['background']) )
		{
			$this->slide_background_url = $this->slides[$this->slider_iteration]['background'];
		}
		else {
			$this->slide_background_url = '';
		}
		
		// the link may be blank!
		if (!empty ($this->slides[$this->slider_iteration]['link']) )
		{
			$this->slide_link = $this->slides[$this->slider_iteration]['link'];
		}
		else {
			$this->slide_link = '';
		}
		
		// get X and Y coords
		if (!empty ($this->slides[$this->slider_iteration]['title_pos_x']) || $this->slides[$this->slider_iteration]['title_pos_x']) === 0)
		{
			$this->slide_x = $this->slides[$this->slider_iteration]['title_pos_x'];
		}
		if (!empty ($this->slides[$this->slider_iteration]['title_pos_y']) || $this->slides[$this->slider_iteration]['title_pos_y']) === 0 )
		{
			$this->slide_y = $this->slides[$this->slider_iteration]['title_pos_y'];
		}
		
		
		
		// the data is ready, bump the iterator and return true
		$this->slider_iteration++;
		return true;
		
		
	}
	
	public function the_title()
	{
	/*
		Print the slide title to output, having sanitised it.
	*/
	
		echo $this->get_the_title();
	
	}
	
	public function get_the_title()
	{
	/*
		Return the slide title, having sanitised it.
	*/
	
		return esc_html( apply_filters( 'vpm-slider_slide_title', $this->slide_title ) );
	
	}
	
	public function the_description()
	{
	/*
		Print the slide description to output, having sanitised it.
	*/
	
		echo $this->get_the_description();
	
	}
	
	public function get_the_description()
	{
	/*
		Return the slide description, having sanitised it.
	*/
	
		return esc_html( apply_filters ( 'vpm-slider_slide_description', $this->slide_description ) );
	
	}
	
	public function the_background_url()
	{
	/*
		Print the background URL to output, having sanitised it.
	*/
	
		echo $this->get_the_background_url();
	
	}
	
	public function get_the_background_url()
	{
	/*
		Return the background URL, having sanitisied it.
	*/
		return esc_url( apply_filters ('vpm-slider_slide_background_url', $this->slide_background_url) );
	
	}
	
	public function the_link()
	{
	/*
		Print the slide link URL to output, having sanitised it.
	*/
	
		echo $this->get_the_link();
	
	}
	
	public function get_the_link()
	{
	/*
		Return the slide link URL, having sanitised it.
	*/
	
		return esc_url ( apply_filters('vpm-slider_slide_link', $this->slide_link) );
	
	}
	
	public function the_x()
	{
	/*
		Print the X coordinate to the output, having sanitised it.
	*/
	
		echo $this->get_the_x();
	
	}
	
	public function get_the_x()
	{
	/*
		Return the X coordinate, having sanitised it.
	*/
	
		return intval ( apply_filters( 'vpm-slider_slide_x', $this->slide_x ), 10 /* decimal */ );
	
	}
	
	public function the_y()
	{
	/*
		Print the Y coordinate to the output, having sanitised it.
	*/
	
		echo $this->get_the_y();
	
	}
	
	public function get_the_y()
	{
	/*
		Return the Y coordinate, having sanitised it.
	*/
	
		return intval ( apply_filters( 'vpm-slider_slide_y', $this->slide_y ), 10 /* decimal */ );
	
	}
	
	public function the_identifier()
	{
	/*
		Print the slide identifier to output, having sanitised it.
	*/
	
		echo $this->get_the_identifier();
		
	}
	
	public function get_the_identifier()
	{
	/*
		Return the slide identifier to output, having sanitised it.
	*/
	
		return esc_attr( apply_filters('vpm-slider_slide_identifier', $this->slide_identifier) );
	
	}
	
	public function iteration()
	{
	/*
		Return the iteration number. How many slides have we been through?
	*/
	
		return intval ( $this->slider_iteration - 1 );
		// has_slides() always bumps the iteration ready for the next run, but we
		// are still running for the theme's purposes on the previous iteration.
		// Hence, returning the iteration - 1.
	
	}


};

register_activation_hook(__FILE__, array('VPMSlider', 'createSlidesOptionField'));
add_action('admin_menu', array('VPMSlider', 'addAdminSubMenu'));
add_action('widgets_init', array('VPMSlider', 'registerAsWidget'));
add_action('admin_init', array('VPMSlider', 'passControlToAjaxHandler'));
add_action('admin_head-media-upload-popup', array('VPMSlider', 'printUploaderJavaScript'));

add_action('wp_enqueue_scripts', array('VPMSlider', 'enqueueSliderFrontend'));

?>