<?php
/********************************************************************************
VPM Slider Backend

Custom data handling access backend

    Copyright (C) 2011-2012 Peter Upfold.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License, version 2, as 
    published by the Free Software Foundation.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


*********************************************************************************/

if (!defined('VPM_SLIDER_IN_FUNCTIONS'))
{
	header('HTTP/1.1 403 Forbidden');
	die('<h1>Forbidden</h1>');
}


	/* data strucutre
	
		a serialized array stored as a wp_option
		
		
		vpm_slider_slides
		
			[0]
				id				[string] (generated by str_replace('.', '_', uniqid('', true)); )
				title			[string]
				description		[string]
				background		[string]
				link			[string]
				title_pos_x		[int]
				title_pos_y		[int]
				
			[1]
				id				[string] (generated by str_replace('.', '_', uniqid('', true)); )
				title			[string]
				description		[string]
				background		[string]
				link			[string]
				title_pos_x		[int]
				title_pos_y		[int]	
				
			[2] ...			
	
	*/
	
class VPMSliderBackend {

	private $groupSlug; // the slug of this slide group

	public function __construct($slug)
	{
	/*
		Construct the backend handler, passing in the slug of the desired
		group to modify.
	*/
	
		$this->groupSlug = $this->sanitizeSlideGroupSlug($slug);
		
		if (!get_option('vpm_slider_slides_' . $this->groupSlug))
		{
			throw new Exception('The specified slide group does not exist.', 1);
			return false;
		}
	
	}
	
	public function sanitizeSlideGroupSlug($slug)
	{
	/*
		Sanitize a slide group slug, for accessing the wp_option row with that slug name.		
	*/
		return substr(preg_replace('/[^a-zA-Z0-9]/', '', $slug), 0, 64);
	}
	

	public function createNewSlide($title, $description, $background, $link, $title_pos_x, $title_pos_y)
	{
		/*
			Given a pre-validated set of data (title, description, backgorund,
			link, title_pos_x and title_pos_y, create a new slide and add to the
			option. Return the new slide ID for resorting in another function.
		*/
		
		$currentSlides = get_option('vpm_slider_slides_' . $this->groupSlug);
		
		if ($currentSlides === false)
		{
			//TODO check group existence
			require_once(dirname(__FILE__).'/vpm-slider.php');
			VPMHomepageSlides::createSlidesOptionField();
			$currentSlides = get_option('vpm_slider_slides_' . $this->groupSlug);
			if ($currentSlides === false)
			{
				return false; //can't do it
			}
		}
		
		$newId = str_replace('.', '', uniqid('', true));
		
		$newSlide = array(
		
			'id' => $newId,
			'title' => $title,
			'description' => $description,
			'background' => $background,
			'link' => $link,
			'title_pos_x' => $title_pos_x,
			'title_pos_y' => $title_pos_y		
		
		);	
		
		$currentSlides[count($currentSlides)] = $newSlide;
		
		if ($this->writeNewSlidesOptionWithSlides($currentSlides))
		{
			return $newId;
		}
		else {
			return false;
		}
	
	}
	
	public function getSlideDataWithID($slideID) {
	/*
		Fetch the whole object for the given slide ID.
	*/
	
		$currentSlides = get_option('vpm_slider_slides_' . $this->groupSlug);
		
		if ($currentSlides === false || !is_array($currentSlides) || count($currentSlides) < 0)
		{
			return false;
		}
		
		else {
		
			foreach($currentSlides as $slide) {
			
				if ($slide['id'] == $slideID) {
				
					return $slide;
				
				}			
			
			}
			
			// if we didn't find it
			
			return false;
		}
	
	}
	
	public function updateSlideWithIDAndData($slideID, $title, $description, $background, $link, $title_pos_x, $title_pos_y)
	{
	/*
		Given the slideID, update that slide with the pre-filtered data specified.
	*/
	
	$currentSlides = get_option('vpm_slider_slides_' . $this->groupSlug);
		
		if ($currentSlides === false || !is_array($currentSlides) || count($currentSlides) < 0)
		{
			return false;
		}
		
		else {
		
			$found = false;
		
			foreach($currentSlides as $i => $slide) {
			
				if ($slide['id'] == $slideID) {
				
					// we found the record we were looking for. update it
					$currentSlides[$i]['title'] = $title;
					$currentSlides[$i]['description'] = $description;
					$currentSlides[$i]['background'] = $background;
					$currentSlides[$i]['link'] = $link;
					$currentSlides[$i]['title_pos_x'] = $title_pos_x;
					$currentSlides[$i]['title_pos_y'] = $title_pos_y;
				
					$found = true;
				
				}	
			
			}
			
			if (!$found)
			{
				return false;
			}
		}
		
		// $currentSlides now holds the slides we want to save
		return $this->writeNewSlidesOptionWithSlides($currentSlides);
	
	}
	
	private function writeNewSlidesOptionWithSlides($slidesToWrite)
	{
	/*
		Dumb function that just updates the option with the array it is given.
	*/
	
		return update_option('vpm_slider_slides_' . $this->groupSlug, $slidesToWrite);
	
	}

	public function validateURL($url)
	{
	/*
		Assess whether or not a given string is a valid URL format, based on
		a regex check. Returns true for valid format, false otherwise.
	*/

		// acknowledging <http://www.blog.highub.com/regular-expression/php-regex-regular-expression/php-regex-validating-a-url/>
	

		$pattern = '/^(([\w]+:)?\/\/)?(([\d\w]|%[a-fA-f\d]{2,2})+(:([\d\w]|%[a-fA-f\d]{2,2})+)?@)?([\d\w][-\d\w]{0,253}[\d\w]\.)+[\w]{2,4}(:[\d]+)?(\/([-+_~.\d\w]|%[a-fA-f\d]{2,2})*)*(\?(&amp;?([-+_~.\d\w]|%[a-fA-f\d]{2,2})=?)*)?(#([-+_~.\d\w]|%[a-fA-f\d]{2,2})*)?$/';
		
		return preg_match($pattern, $url);
	
	}
	
	public function deleteSlideWithID($slideID) {
	/*
		Remove the slide with slideID from the slides
		option.
	*/
	
		$currentSlides = get_option('vpm_slider_slides_' . $this->groupSlug);
		
		if ($currentSlides === false)
		{
			//TODO handle slide group existence problems
			require_once('vpm-slider.php');
			VPMHomepageSlides::createSlidesOptionField();
			$currentSlides = get_option('vpm_slider_slides_' . $this->groupSlug);
			if ($currentSlides === false)
			{
				return false; //can't do it
			}
		}	
		
		if (is_array($currentSlides) && count($currentSlides) > 0)
		{
			$foundIt = false;		
			
			foreach($currentSlides as $index => $slide)
			{
			
				if ($slide['id'] == $slideID)
				{
					unset($currentSlides[$index]);
					$foundIt = true;
					break;
				}
			
			}
			
			if (!$foundIt)
				return false;
			else
			{
				return $this->writeNewSlidesOptionWithSlides($currentSlides);
			}
		
		}
		
		else {
			return false;
		}			
	
	}

	public function reshuffleSlides($newSlideOrder)
	{
	/*
		Given a new, serialised set of slide order IDs in an array,
		this function will shuffle the order of the slides with said
		IDs in the options array.
	*/
	
		$currentSlides = get_option('vpm_slider_slides_' . $this->groupSlug);
		
		if ($currentSlides === false)
		{
			//TODO existence again
			require_once('vpm-slider.php');
			VPMHomepageSlides::createSlidesOptionField();
			$currentSlides = get_option('vpm_slider_slides_' . $this->groupSlug);
			if ($currentSlides === false)
			{
				return false; //can't do it
			}
		}	
		
		
		if (is_array($currentSlides) && count($currentSlides) > 0)
		{
		
			$newSlides = array();	
			
			$newSlideNotFoundInCurrent = false;	
			
			foreach($newSlideOrder as $newIndex => $newSlideID)
			{			
				$foundThisSlide = false;
			
				foreach($currentSlides as $index => $slide)
				{
					if ($slide['id'] == $newSlideID)
					{
						$newSlides[count($newSlides)] = $slide;
						$foundThisSlide = true;
						continue;
					}
				}
				
				if (!$foundThisSlide)
				{
					$newSlideNotFoundInCurrent = true;
				}
				
			}
			
			if (count($currentSlides) != count($newSlides) || $newSlideNotFoundInCurrent)
			{
				// there is a disparity -- so a slide or more will be lost
				return 'disparity';
			}
			
			return $this->writeNewSlidesOptionWithSlides($newSlides);
		
		}
		else
		{
			return false;
		}
	
	}


};


?>